{"version":3,"sources":["consts/SERVICES.js","images/logos/ParamountPlusLogo.svg","images/logos/DisneyPlusLogo.svg","images/logos/NetflixLogo.svg","images/logos/HuluLogo.svg","consts/SERVICES_META.js","context/ServiceContext.js","Components/Service/Service.js","context/SubscriptionsContext.js","Components/AddService/AddService.js","Components/SubscriptionContainer/SubscriptionContainer.js","App.js","reportWebVitals.js","index.js"],"names":["NETFLIX","Symbol","HULU","PARAMOUNT_PLUS","DISNEY_PLUS","SERVICES","SERVICES_META","displayName","logoSrc","NetflixLogo","color","unsubscribeHref","HuluLogo","ParamountPlusLogo","DisneyPlusLogo","ServiceContext","React","createContext","services","getMetaForService","service","includes","isValidService","Service","renewalDate","useContext","displayRenewalDate","date","Date","getMonth","getDate","className","style","backgroundColor","src","alt","href","target","rel","SubscriptionsContext","current","add_current","subscription","remove_current","AddService","useState","updateService","updateRenewalDate","onSubmit","e","preventDefault","htmlFor","id","options","map","label","value","onChange","type","getServiceForDisplayName","SubscriptionContainer","JSON","parse","localStorage","getItem","updateCurrent","useEffect","setItem","stringify","_filter","filter","current_sub","Provider","old","console","log","new_current","Consumer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5117a17.chunk.js","sourcesContent":["export const NETFLIX =  Symbol(\"netflix\");\nexport const HULU =  Symbol(\"hulu\");\nexport const PARAMOUNT_PLUS =  Symbol(\"paramount_plus\");\nexport const DISNEY_PLUS =  Symbol(\"disney_plus\");\n\nexport const SERVICES = [NETFLIX, HULU, PARAMOUNT_PLUS, DISNEY_PLUS];\n\nexport default SERVICES","export default __webpack_public_path__ + \"static/media/ParamountPlusLogo.57d56edd.svg\";","export default __webpack_public_path__ + \"static/media/DisneyPlusLogo.e1eabf98.svg\";","export default __webpack_public_path__ + \"static/media/NetflixLogo.cd8d4fcd.svg\";","export default __webpack_public_path__ + \"static/media/HuluLogo.2eac1b61.svg\";","import { DISNEY_PLUS, HULU, NETFLIX, PARAMOUNT_PLUS } from \"./SERVICES\"\nimport ParamountPlusLogo from '../images/logos/ParamountPlusLogo.svg'\nimport DisneyPlusLogo from '../images/logos/DisneyPlusLogo.svg'\nimport NetflixLogo from '../images/logos/NetflixLogo.svg'\nimport HuluLogo from '../images/logos/HuluLogo.svg'\n\nconst SERVICES_META = {\n    [NETFLIX]: {\n        displayName: \"Netflix\",\n        logoSrc: NetflixLogo,\n        color: \"#dd0a14\",\n        unsubscribeHref: \"https://www.netflix.com/YourAccount\",\n    },\n    [HULU]: {\n        displayName: \"Hulu\",\n        logoSrc: HuluLogo,\n        color: \"#1ee07f\",\n        unsubscribeHref: \"https://secure.hulu.com/account\",\n    },\n    [PARAMOUNT_PLUS]: {\n        logoSrc: ParamountPlusLogo,\n        displayName: \"Paramount+\",\n        unsubscribeHref: \"https://www.paramountplus.com/account/\",\n        color: \"#0164ff\"\n    },\n    [DISNEY_PLUS]: {\n        logoSrc: DisneyPlusLogo,\n        displayName: \"Disney+\",\n        unsubscribeHref: \"https://www.disneyplus.com/account\",\n        color: \"#1b348c\"\n    } \n}\n\nexport default SERVICES_META","import React from 'react';\nimport SERVICES from '../consts/SERVICES';\nimport SERVICES_META from '../consts/SERVICES_META';\nexport const ServiceContext = React.createContext({\n    services: SERVICES,\n    getMetaForService: (service) => {\n        if (SERVICES.includes(service)) {\n            return SERVICES_META[service];\n        }\n    },\n    isValidService: (service) => SERVICES.includes(service)\n});","import React from 'react';\nimport { useContext } from 'react';\nimport { ServiceContext } from '../../context/ServiceContext';\nimport './Service.css';\n\nfunction Service({service, renewalDate}) {\n  const {getMetaForService} = useContext(ServiceContext);\n\n  const {displayName, unsubscribeHref, logoSrc, color} = getMetaForService(service)\n\n  const displayRenewalDate = (() => {\n    const date = new Date(renewalDate);\n\n    return `${date.getMonth() + 1}/${date.getDate()}`\n  })();\n\n  return (\n    <div className=\"Service\" style={{backgroundColor: color}}>\n      <div className=\"Service__logo\">\n        <img src={logoSrc} alt=\"\" />\n      </div>\n      <div className=\"Service__name\">\n        {displayName}\n      </div>\n      {\n        renewalDate && (\n          <div className=\"Service__renewalDate\">\n            Due {displayRenewalDate}\n          </div>\n        )\n      }\n      <div className=\"Service__ctas\">\n        {unsubscribeHref && <a className=\"Service__cta\" href={unsubscribeHref} target=\"_blank\" rel=\"noreferrer\" >Unsubscribe</a>}\n        <a className=\"Service__cta\" target=\"_blank\" rel=\"noreferrer\" >Remind Me</a>\n      </div>\n    </div>\n  );\n}\n\nexport default Service;\n","import React from 'react';\n\n\nexport const SubscriptionsContext = React.createContext({\n    current: [],\n    add_current (subscription) {\n\n    },\n    remove_current (subscription) {\n        \n    }\n});","import React, { useState } from 'react';\nimport { useContext } from 'react';\nimport SERVICES from '../../consts/SERVICES';\nimport Select from 'react-select'\nimport { ServiceContext } from '../../context/ServiceContext';\nimport './AddService.css';\nimport { SubscriptionsContext } from '../../context/SubscriptionsContext';\n\nfunction AddService() {\n  const {getMetaForService} = useContext(ServiceContext);\n  const {add_current, remove_current, current} = useContext(SubscriptionsContext);\n  const [service, updateService] = useState(\"\");\n  const [renewalDate, updateRenewalDate] = useState();\n\n  const onFormSubmit = () => {\n    add_current({service, renewalDate})\n  }\n\n  return (\n    <div className=\"AddService\">\n      <form className=\"AddService__form\" onSubmit={(e) => {\n        e.preventDefault()\n        onFormSubmit()\n      }}>\n        <div className=\"AddService__field\">\n          <label className=\"AddService__field__label\" htmlFor=\"serviceSelect\">Select a service </label>\n          <Select className=\"AddService__field__select\" id=\"serviceSelect\" options={SERVICES.map(service => {\n            const {displayName} = getMetaForService(service);\n            return (\n              {\n                label: displayName,\n                value: displayName\n              }\n            )\n          })} onChange={({value}) => updateService(value)}> </Select>\n          {/* <select  value={service} onChange={(e) => { updateService(e.target.value) }}>\n            <option value=\"\" disabled>Select a service</option>\n            {SERVICES.map(service => {\n              const {displayName, unsubscribeHref, logoSrc, color} = getMetaForService(service)\n\n              return (\n                <option key={`${displayName}-option`} value={service}> {displayName} </option>\n              )\n            })}\n          </select> */}\n        </div>\n        <div className=\"AddService__field\">\n          <label className=\"AddService__field__label\" htmlFor=\"renewalDate\">When's the bill due? </label>\n          <input className=\"AddService__field__input\" id=\"renewalDate\" type=\"date\" onChange={(e) => updateRenewalDate(e.target.value)}/> \n        </div>\n       \n        <button className=\"AddService__button\">+ Add Service</button>\n      </form>\n    </div>\n  );\n}\n\nexport default AddService;\n","import React, { useEffect, useState } from 'react';\nimport { DISNEY_PLUS, HULU, NETFLIX, PARAMOUNT_PLUS } from '../../consts/SERVICES';\nimport { SubscriptionsContext } from '../../context/SubscriptionsContext';\nimport AddService from '../AddService/AddService';\nimport Service from '../Service/Service';\n\nconst get_current = () => JSON.parse(localStorage.getItem(\"current_subscriptions\")) || []\nconst getServiceForDisplayName = (displayName) => {\n  switch(displayName) {\n    case \"Netflix\":\n      return NETFLIX;\n    case \"Hulu\":\n      return HULU;\n    case \"Paramount+\":\n      return PARAMOUNT_PLUS\n    case \"Disney+\":\n      return DISNEY_PLUS\n  }\n}\n\n\nconst Test = (props) => {\n  return (\n    <pre>\n      {JSON.stringify(props)}\n    </pre>\n  )\n}\n\nfunction SubscriptionContainer() {\n  const [current, updateCurrent] = useState(get_current());\n\n  useEffect(() => {\n    localStorage.setItem(\"current_subscriptions\",  JSON.stringify(current))\n  }, [current])\n\n  const add_current = (subscription) => {\n    const old = _filter(subscription)\n    console.log(old)\n    updateCurrent([subscription, ...old])\n  }\n\n  const _filter =  (subscription) => current.filter(current_sub => current_sub.service !== subscription.service)\n\n  const remove_current = (subscription) => {\n    const new_current = _filter(subscription)\n    updateCurrent(new_current)\n  }\n\n  return (\n    <SubscriptionsContext.Provider value={\n      {\n        current,\n        add_current,\n        remove_current\n      }\n    }>\n      <SubscriptionsContext.Consumer>\n        {\n          ({current, add_current, remove_current}) => (\n            <>\n              <AddService {...{add_current, remove_current}}/>\n              {current.map(({service, renewalDate}) => {\n                return (\n                  <Service key={`service-${service}`} service={getServiceForDisplayName(service)} renewalDate={renewalDate} />\n                )\n              })}\n            </>\n          )\n        }\n      </SubscriptionsContext.Consumer>\n\n    </SubscriptionsContext.Provider>\n  );\n}\n\nexport default SubscriptionContainer;\n","import './App.css';\nimport Service from './Components/Service/Service';\nimport AddService from './Components/AddService/AddService';\nimport SubscriptionContainer from './Components/SubscriptionContainer/SubscriptionContainer';\nimport { HULU, NETFLIX, PARAMOUNT_PLUS, DISNEY_PLUS } from './consts/SERVICES';\nimport { useContext } from 'react';\nimport { SubscriptionsContext } from './context/SubscriptionsContext';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App__grid\">\n        <SubscriptionContainer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}